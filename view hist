111111111111111111

// Main App Component
const App = () => {
  const [jobs, setJobs] = useState(initialJobs);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('All');
  const [loadingJobIds, setLoadingJobIds] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentJob, setCurrentJob] = useState(null);
  // Removed currentPage state as it's no longer needed for top-level navigation

  // States for Job Definition Modal
  const [isDefinitionModalOpen, setIsDefinitionModalOpen] = useState(false);
  const [currentJobDefinition, setCurrentJobDefinition] = useState('');
  const [currentJobNameForDefinition, setCurrentJobNameForDefinition] = useState('');
  const [loadingDefinition, setLoadingDefinition] = useState(false);
  const [definitionError, setDefinitionError] = useState(null);

  // States for Job History Modal // <--- ADD THESE NEW STATES
  const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);
  const [selectedJobNameForHistory, setSelectedJobNameForHistory] = useState('');
  const [jobHistoryData, setJobHistoryData] = useState([]);
  const [loadingJobHistory, setLoadingJobHistory] = useState(false);
  const [jobHistoryError, setJobHistoryError] = useState(null);
  const [historySearchTerm, setHistorySearchTerm] = useState(''); // Search term for history modal dropdown




22222222222222222

// Main App Component
const App = () => {
  // ... existing states and other useCallback functions ...

  // Handler for viewing job history in modal // <--- ADD THIS FUNCTION
  const handleViewHistory = useCallback(async (jobName) => {
    setSelectedJobNameForHistory(jobName);
    setJobHistoryData([]);
    setJobHistoryError(null);
    setLoadingJobHistory(true);
    setIsHistoryModalOpen(true); // Open the history modal

    try {
      const formattedJobName = jobName.replace(/\s+/g, '_').toLowerCase();
      const data = await fetchData(`https://www.jobhistory.com/${formattedJobName}`);
      setJobHistoryData(data);
    } catch (error) {
      console.error(`Error fetching history for ${jobName}:`, error);
      setJobHistoryError(`Failed to load run history. Please check the API and try again.`);
    } finally {
      setLoadingJobHistory(false);
    }
  }, [fetchData]);

  // Handler for selecting a job from the dropdown within the history modal // <--- ADD THIS FUNCTION
  const handleHistoryModalJobSelect = useCallback(async (event) => {
    const jobName = event.target.value;
    setSelectedJobNameForHistory(jobName);
    setJobHistoryData([]);
    setJobHistoryError(null);
    setLoadingJobHistory(true);

    if (jobName) {
      try {
        const formattedJobName = jobName.replace(/\s+/g, '_').toLowerCase();
        const data = await fetchData(`https://www.jobhistory.com/${formattedJobName}`);
        setJobHistoryData(data);
      } catch (error) {
        console.error(`Error fetching history for ${jobName}:`, error);
        setJobHistoryError(`Failed to load run history. Please check the API and try again.`);
      } finally {
        setLoadingJobHistory(false);
      }
    } else {
      setLoadingJobHistory(false);
    }
  }, [fetchData]);

  // ... rest of the App component ...
};




333333333333333333333333

// Job List Component
- const JobList = ({ jobs, onForceStart, onHold, onOffHold, onKill, onOnIce, onRefreshData, loadingJobIds, onJobNameClick }) => {
+ const JobList = ({ jobs, onForceStart, onHold, onOffHold, onKill, onOnIce, onRefreshData, loadingJobIds, onJobNameClick, onViewHistory }) => {




4444444444444444444444444444444


// Job List Component
const JobList = ({ jobs, onForceStart, onHold, onOffHold, onKill, onOnIce, onRefreshData, loadingJobIds, onJobNameClick, onViewHistory }) => {
  // ... (existing code) ...

  return (
    <div className="job-list-container">
      <div className="table-wrapper">
        <table className="job-table">
          <thead><tr>
              <th>Job Name</th>
              <th>Status</th>
              <th>Last Run</th>
              <th>Next Run</th>
              <th>Actions</th>
              <th>History</th> {/* <--- ADD THIS TH */}
            </tr></thead>
          <tbody>
            {jobs.map((job, index) => (
              <tr key={job.id} className={index % 2 === 0 ? 'even-row' : 'odd-row'}>
                <td className="job-name-clickable" onClick={() => onJobNameClick(job.name)}>
                  {job.name}
                </td>
                <td>
                  <span className={`status-badge ${getStatusColorClass(job.status)}`}>
                    {loadingJobIds.includes(job.id) ? 'Loading...' : job.status}
                  </span>
                </td>
                <td>{job.lastRun}</td>
                <td>{job.nextRun}</td>
                <td className="job-actions">
                  {/* ... (existing action buttons) ... */}
                </td>
                <td> {/* <--- ADD THIS TD */}
                  <button
                    onClick={() => onViewHistory(job.name)}
                    className="action-button action-history"
                    title="View Run History"
                  >
                    <History size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};




55555555555555555555555555555555


// New Job History Modal Component // <--- ADD THIS ENTIRE COMPONENT
const JobHistoryModal = ({ isOpen, onClose, jobName, jobHistoryData, isLoading, error, jobs, onJobSelect, searchTerm, onSearchChange }) => {
  const getStatusColorClass = (status) => {
    switch (status) {
      case 'completed': return 'status-completed';
      case 'failed': return 'status-failed';
      default: return 'status-default';
    }
  };

  const filteredJobs = jobs.filter(job =>
    job.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content large-modal">
        <h2 className="modal-title">Job Run History: {jobName}</h2>

        {/* Search and Dropdown for history modal */}
        <div className="filter-search-container modal-filter-search">
          <div className="search-input-wrapper">
            <Search className="search-icon" size={20} />
            <input
              type="text"
              placeholder="Search job by name..."
              value={searchTerm}
              onChange={(e) => onSearchChange(e.target.value)}
              className="search-input"
            />
          </div>
          <div className="filter-select-wrapper">
            <History className="filter-icon" size={20} />
            <select
              value={jobName} // Display current job name as selected
              onChange={onJobSelect}
              className="filter-select"
            >
              <option value="">Select a Job to View History</option>
              {filteredJobs.map(job => (
                <option key={job.id} value={job.name}>
                  {job.name}
                </option>
              ))}
            </select>
            <div className="select-arrow">
              <svg className="fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/></svg>
            </div>
          </div>
        </div>

        {isLoading ? (
          <p className="loading-message">Loading run history...</p>
        ) : error ? (
          <p className="error-message">{error}</p>
        ) : (
          <div className="history-table-container">
            <table className="job-table">
              <thead><tr>
                <th>Job Name</th>
                <th>Status</th>
                <th>Start Time</th>
                <th>End Time</th>
              </tr></thead>
              <tbody>
                {jobHistoryData.length > 0 ? jobHistoryData.map((run, index) => (
                  <tr key={index}>
                    <td>{run.job_name}</td>
                    <td>
                      <span className={`status-badge ${getStatusColorClass(run.status)}`}>
                        {run.status}
                      </span>
                    </td>
                    <td>{run.start_time}</td>
                    <td>{run.end_time}</td>
                  </tr>
                )) : (
                  <tr>
                    <td colSpan="4" className="text-center">No run history available for this job.</td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        )}
        <div className="modal-actions mt-4">
          <button
            onClick={onClose}
            className="modal-button modal-button-cancel"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};





77777777777777777777777777777777777777777



// Main App Component
const App = () => {
  // ... (existing code) ...

  return (
    <div className="app-container">
      {/* ... (existing style and header) ... */}
      <main className="main-content">
        {/* Only Job list is rendered directly now */}
        <>
          <JobControls
            onAddJob={handleAddJob}
          />
          <JobFilterSearch
            searchTerm={searchTerm}
            onSearchChange={setSearchTerm}
            selectedStatus={selectedStatus}
            onFilterChange={setSelectedStatus}
          />
          <JobList
            jobs={filteredJobs}
            onForceStart={handleForceStart}
            onHold={handleOnHold}
            onOffHold={handleOffHold}
            onKill={handleKill}
            onOnIce={handleOnIce}
            onRefreshData={refreshJobData}
            loadingJobIds={loadingJobIds}
            onJobNameClick={handleJobNameClick}
            onViewHistory={handleViewHistory} {/* <--- ADD THIS PROP */}
          />
        </>

        <JobModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          onSave={handleSaveJob}
          job={currentJob}
        />

        <JobDefinitionModal
          isOpen={isDefinitionModalOpen}
          onClose={() => setIsDefinitionModalOpen(false)}
          jobName={currentJobNameForDefinition}
          definition={currentJobDefinition}
          isLoading={loadingDefinition}
          error={definitionError}
        />

        {/* New Job History Modal */} {/* <--- ADD THIS ENTIRE MODAL COMPONENT CALL */}
        <JobHistoryModal
          isOpen={isHistoryModalOpen}
          onClose={() => setIsHistoryModalOpen(false)}
          jobName={selectedJobNameForHistory}
          jobHistoryData={jobHistoryData}
          isLoading={loadingJobHistory}
          error={jobHistoryError}
          jobs={jobs} // Pass all jobs for the dropdown in the modal
          onJobSelect={handleHistoryModalJobSelect} // Handler for dropdown selection in modal
          searchTerm={historySearchTerm} // Pass search term for history modal
          onSearchChange={setHistorySearchTerm} // Pass setter for history modal search
        />
      </main>
    </div>
  );
};





88888888888888888888888888888


/* New History button styles */ /* <--- ADD THESE STYLES */
          .action-history {
            color: #6366f1; /* text-indigo-600 */
          }
          .action-history:hover:not(.disabled) {
            background-color: #eef2ff; /* hover:bg-indigo-50 */
            color: #4338ca; /* hover:text-indigo-700 */
          }

          /* Disabled state for action buttons */
          .action-button.disabled {
            color: #9ca3af; /* text-gray-400 */
            background-color: #f3f4f6; /* bg-gray-100 */
            cursor: not-allowed;
            transform: none; /* Prevent scale on hover for disabled buttons */
          }

          /* Modal Styles - Only for JobModal and JobDefinitionModal now */
          .modal-overlay {
            position: fixed;
            inset: 0;
            background-color: rgba(31, 41, 55, 0.6); /* bg-gray-800 bg-opacity-60 */
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem; /* p-4 */
            z-index: 50;
            backdrop-filter: blur(4px); /* backdrop-blur-sm */
          }

          .modal-content {
            background-color: white;
            border-radius: 1rem; /* rounded-2xl */
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); /* shadow-2xl */
            padding: 2rem; /* p-8 */
            width: 100%;
            max-width: 32rem; /* max-w-lg */
            transform: scale(1);
            opacity: 1;
            transition: all 0.3s ease; /* transition duration-300 */
            border: 1px solid #e5e7eb; /* border border-gray-200 */
          }

          .modal-content.large-modal { /* New class for larger modal */ /* <--- ADD THIS STYLE */
            max-width: 60rem; /* max-w-3xl */
          }

          /* ... (rest of modal styles) ... */

          /* Reverted column widths */ /* <--- MODIFY THESE STYLES */
          .job-table th:first-child,
          .job-table td:first-child {
            width: 20%; /* Job Name */
          }
          .job-table th:nth-child(2),
          .job-table td:nth-child(2) {
            width: 15%; /* Status */
          }
          .job-table th:nth-child(3),
          .job-table td:nth-child(3) {
            width: 20%; /* Last Run */
          }
          .job-table th:nth-child(4),
          .job-table td:nth-child(4) {
            width: 20%; /* Next Run */
          }
          .job-table th:last-child,
          .job-table td:last-child {
            width: 10%; /* History */
          }
          .job-table th:nth-last-child(2), /* Actions column */
          .job-table td:nth-last-child(2) {
            width: 15%; /* Adjusted width for Actions to make space for History */
          }

          /* ... (other styles) ... */

          .modal-filter-search { /* Specific styles for filter/search within modal */ /* <--- ADD THESE STYLES */
            padding: 0; /* Remove padding from .filter-search-container */
            box-shadow: none; /* Remove shadow */
            border: none; /* Remove border */
            margin-bottom: 1rem; /* Adjust margin */
          }
        `}
      </style>
